---
title: "eds 223 Week 4"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
library(geodata)
library(terra)
library(tidyverse)
library(tmap)
library(kableExtra)
library(spData)
library(spDataLarge)

```


```{r}
zion_elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))

zion_land <-rast(system.file("raster/nlcd.tif", package = "spDataLarge"))
```


```{r}
tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)")

tm_shape(zion_land) +
  tm_raster(title = "Land Cover")
```

```{r}
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))

```

```{r}
tm_shape(landsat3) +
  tm_raster()
```

```{r}
landsat3 <- subset(landsat, 3)
```

```{r}
global(zion_elevation, mean)
freq(zion_land)
```

## Indexing

```{r}
zion_elevation[1, 1] # value of cell in first row and first column 
zion_elevation[1]

landsat[1] # four values because this first cell has mulitple layers
```

```{r}
zion_elevation[1, 1] <- 0 # updates value in cell to 0

landsat[1] <- 0 # will change all the layers in that cell

test_raster <- zion_elevation
test_raster[test_raster < 20] <- NA

```

## Spatial Subsetting

### points
```{r}
point <- matrix(c(-113, 37.5), ncol = 2)

terra::extract(zion_elevation, point) # what the elevation is at that point



```

### clipping
```{r}
clip <- rast(xmin = -113.3, xmax = -113, ymin = 37.2, ymax = 37.9,
             resolution = 0.3,
             vals = 1)

zion_elevation_clip <- zion_elevation[clip, drop = FALSE] # makes it not drop geometry

```

```{r}
tm_shape(zion_elevation) +
  tm_raster()

tm_shape(zion_elevation_clip) +
  tm_raster()
```

### masking

```{r}
# Creating our mask
rmask <- zion_elevation
rmask[rmask < 2000] <- NA

# mask existing elevation raster
# bracket subsetting
masked1 <- zion_elevation[rmask, drop = FALSE]

# using mask function in terra
masked2 <- terra::mask(zion_elevation, rmask)

```


```{r}
tm_shape(zion_elevation) +
  tm_raster()

tm_shape(masked1) +
  tm_raster()
```

### reclassifying (putting them in groups)
```{r}
rcl <- matrix(c(1000, 1500, 1,
                1500, 2000, 2,
                2000, 2500, 3,
                2500, 3000, 4),
              ncol = 3, byrow = TRUE)

reclassified <- terra::classify(zion_elevation, rcl = rcl)
values(reclassified) <- as.factor(values(reclassified))

tm_shape(reclassified) +
  tm_raster()


```

```{r}
ndvi_fun <- function(nir, red){
  (nir - red)/(nir + red)
}

ndvi_rast <- lapp(landsat[[c(4,3)]], fun = ndvi_fun)
                  
tm_shape(ndvi_rast) +
  tm_raster()
```

### focal
```{r}
elevation_focal <- focal(zion_elevation,
      w = matrix(1, nrow = 9, ncol = 9),
      fun = min)

tm_shape(elevation_focal) +
  tm_raster()
```

### zonal
```{r}
# like groupby summarize for raster data
terra::zonal(zion_elevation, reclassified, fun = mean) # no spatial mapping attached


```

```{r}
terra::global(zion_elevation, mean)
```

### Changing the extent

```{r}
extend <- terra::extend(zion_elevation, c(1,200)) #raster with larger extent than original 

extend2 <- terra::extend(zion_elevation, extend) 

extend + extend2
```

### Origin

```{r}
origin(zion_elevation)

```

### Changing resolution

```{r}
zion_elevation_coarse <- terra::aggregate(zion_elevation,
                                          fact = 5,
                                          fun = mean)
# more pixelated image, made little boxes into bigger boxes by taking mean


zion_elevation_disagg <- terra::disagg(zion_elevation_coarse,
                                       fact = 5,
                                       method = "bilinear")

if(identical(zion_elevation, zion_elevation_disagg)){
  print("match") 
} else {
  warning("don't match")
}

```

### resampling

```{r}
target_rast <- rast(xmin = -113.2, xmax = -112.9,
                    ymin = 37.4, ymax = 37.5,
                    nrow = 450, ncol = 460,
                    crs = crs(zion_elevation)) #fake raster to sample into

elevation_resample <- terra::resample(zion_elevation, y = target_rast, method = "bilinear")



```

